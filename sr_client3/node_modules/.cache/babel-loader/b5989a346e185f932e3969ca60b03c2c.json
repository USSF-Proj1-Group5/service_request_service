{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/petervayda/Documents/proj_galvanize/maintain_yo_self/service_request_service/sr_client3/src/ListSR.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useEffect, useState } from \"react\"; //import EditTodo from \"./EditTodo\";\n\nconst ListSR = () => {\n  _s();\n\n  const [serviceRequests, setServiceRequests] = useState([]); //delete todo function\n\n  deleteSR = async id => {\n    const requestOptions = {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(id)\n    };\n    await fetch(`${this.state.urlAPI}/delete_service_request`, requestOptions).then(response => response.json()).then(response => {\n      if (response.status === \"failed\") alert(response.message);\n    });\n  };\n\n  const deleteSR = async id => {\n    try {\n      const requestOptions = {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(body)\n      };\n      await fetch(`http:/localhost:3001/delete_service_request`, requestOptions).then(response => response.json()).then(response => {\n        if (response.status === \"failed\") alert(response.message);\n      });\n      setServiceRequests(serviceRequests.filter(each => each.id !== id));\n    } catch (err) {\n      console.error(err.message);\n    }\n  };\n\n  const getSR = async () => {\n    try {\n      const response = await fetch(\"http://localhost:3001/service_requests\");\n      const jsonData = await response.json();\n      setServiceRequests(jsonData);\n    } catch (err) {\n      console.error(err.message);\n    }\n  };\n\n  useEffect(() => {\n    getSR();\n  }, []);\n  console.log(serviceRequests);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [\" \", /*#__PURE__*/_jsxDEV(\"table\", {\n      class: \"table mt-5 text-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Contractor\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Task\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Edit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: serviceRequests.map(each => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: each.sr_name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: each.sr_contractor\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: each.sr_task\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-danger\",\n              onClick: () => deleteSR(each.id),\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 15\n          }, this)]\n        }, each.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ListSR, \"eGtLEhOPLncvmTWHTfeXGJc09p0=\");\n\n_c = ListSR;\nexport default ListSR;\n/*\nfunction ListSR(props){\n    \n    var displaySR = props.listSR.map(each => {\n    return (<tr key= {each.id}>\n             <td>{each.id}</td>\n             <td>{each.sr_name}</td> \n             <td>{each.sr_task}</td>\n             <td>{each.sr_contractor}</td>\n             <td><button onClick={props.handleDeleteSR} value={each.id}>Delete</button></td> \n          </tr>\n    )})\n    return(\n        <div>\n            <table>\n                <thead>\n                    <tr>\n                        <th>id</th>\n                        <th>name</th>\n                        <th>task</th>\n                        <th>ctr</th>\n                        <th>Delete</th>\n                    </tr>\n\n                </thead>\n                <tbody>\n                    {displaySR}\n                </tbody>\n            </table>\n            \n        </div>\n        \n    )\n}\nexport default ListSR;\n*/\n\nvar _c;\n\n$RefreshReg$(_c, \"ListSR\");","map":{"version":3,"sources":["/Users/petervayda/Documents/proj_galvanize/maintain_yo_self/service_request_service/sr_client3/src/ListSR.jsx"],"names":["React","Fragment","useEffect","useState","ListSR","serviceRequests","setServiceRequests","deleteSR","id","requestOptions","method","headers","body","JSON","stringify","fetch","state","urlAPI","then","response","json","status","alert","message","filter","each","err","console","error","getSR","jsonData","log","map","sr_name","sr_contractor","sr_task"],"mappings":"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","sourcesContent":["import React, { Fragment, useEffect, useState } from \"react\";\n\n//import EditTodo from \"./EditTodo\";\n\nconst ListSR = () => {\n  const [serviceRequests, setServiceRequests] = useState([]);\n\n  //delete todo function\n  deleteSR = async (id) => {\n    const requestOptions = {\n      method: 'DELETE',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(id)\n  };\n    await fetch(`${this.state.urlAPI}/delete_service_request`, requestOptions)\n      .then(response => response.json())\n      .then(response => {\n        if(response.status === \"failed\")\n        alert(response.message)})\n  }\n  const deleteSR = async id => {\n    try {\n        const requestOptions = {\n            method: 'DELETE',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(body)\n        };\n        await fetch(`http:/localhost:3001/delete_service_request`, requestOptions)\n          .then(response => response.json())\n          .then(response => {\n          if(response.status === \"failed\")\n          alert(response.message)})\n\n\n        setServiceRequests(serviceRequests.filter(each => each.id !== id));\n    } catch (err) {\n      console.error(err.message);\n    }\n  };\n\n  const getSR = async () => {\n    try {\n      const response = await fetch(\"http://localhost:3001/service_requests\");\n      const jsonData = await response.json();\n\n      setServiceRequests(jsonData);\n    } catch (err) {\n      console.error(err.message);\n    }\n  };\n\n  useEffect(() => {\n    getSR();\n  }, []);\n\n  console.log(serviceRequests);\n\n  return (\n    <Fragment>\n      {\" \"}\n      <table class=\"table mt-5 text-center\">\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>Contractor</th>\n            <th>Task</th>\n            <th>Edit</th>\n            <th>Delete</th>\n          </tr>\n        </thead>\n        <tbody>\n          {/*<tr>\n            <td>John</td>\n            <td>Doe</td>\n            <td>john@example.com</td>\n          </tr> */}\n          {serviceRequests.map(each => (\n            <tr key={each.id}>\n              <td>{each.sr_name}</td>\n              <td>{each.sr_contractor}</td>\n              <td>{each.sr_task}</td>\n              <td>\n                {/* <EditSR each={each} /> */}\n              </td>\n              <td>\n                <button\n                  className=\"btn btn-danger\"\n                  onClick={() => deleteSR(each.id)}\n                >\n                  Delete\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </Fragment>\n  );\n};\n\nexport default ListSR;\n\n\n\n\n\n/*\nfunction ListSR(props){\n    \n    var displaySR = props.listSR.map(each => {\n    return (<tr key= {each.id}>\n             <td>{each.id}</td>\n             <td>{each.sr_name}</td> \n             <td>{each.sr_task}</td>\n             <td>{each.sr_contractor}</td>\n             <td><button onClick={props.handleDeleteSR} value={each.id}>Delete</button></td> \n          </tr>\n    )})\n    return(\n        <div>\n            <table>\n                <thead>\n                    <tr>\n                        <th>id</th>\n                        <th>name</th>\n                        <th>task</th>\n                        <th>ctr</th>\n                        <th>Delete</th>\n                    </tr>\n\n                </thead>\n                <tbody>\n                    {displaySR}\n                </tbody>\n            </table>\n            \n        </div>\n        \n    )\n}\nexport default ListSR;\n*/"]},"metadata":{},"sourceType":"module"}